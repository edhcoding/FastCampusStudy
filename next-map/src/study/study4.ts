/**
 * Next.js API Routes란? (사진 api1)
 * - Next.js에서 자체적으로 제공하는 백엔드 기능. 서버 사이드 코드를 작성하지 않고도 서버리스 백엔드 엔드포인트를 만들 수 있게 해주는 기능
 * - pages/api 디렉토리 안에 파일을 생성하여 API 엔드포인트를 정의. 이를 통해 데이터를 조회, 생성, 수정, 삭제할 수 있는 서버리스 API를 구축
 *
 *
 *
 * Next.js API ROutes 핵심 기능
 * - 서버리스 백엔드 구축: 서버 코드 작성 없이도 백엔드 엔드포인트 생성 가능 (pages/api 디렉토리)
 * - 동적 라우팅: 파일 이름에 파라미터를 포함하여 동적인 엔드포인트를 생성할 수 있음
 * - HTTP 요청 메서드 처리: 다양한 HTTP 메서드 (GET, POST, PUT, DELETE 등)에 따른 로직 작성 가능
 * - 미들웨어 사용: req, res 매개변수를 활용하여 미들웨어 패턴을 적용할 수 있음
 * - 응답 도우미 함수: res.json(), res.send(), res.status(), res.setHeader()와 같은 응답 도우미 함수를 사용하여 응답을 구성
 * - 간단한 백엔드 로직 작성: Next,js API Routes를 활용하면 데이터 조회, 생성, 수정, 삭제와 같은 간단한 백엔드 로직을 쉽게 작성 가능
 *
 *
 *
 *
 * Next.js API Routes 사용 예시
 * 1. pages/api 디렉토리에 엔드포인트 파일을 생성
 * 2. 엔드포인트 파일 내에서 요청 메서드에 따른 로직 작성
 * 3. req 객체로부터 요청 데이터를 가져와 처리하고 res 객체로 응답을 보냄
 *
 *
 *
 *
 * HTTP메서드에 따른 Next.js API Routes 사용 (api2 사진)
 * - 요청 핸들러에서 req.method를 사용해 HTTP 메서드에 따라 API를 분리해서 적용할 수 있음
 * - 아래와 같이, HTTP 요청의 메서드(GET, POST, PUT, DELETE 등)에 따라 다른 코드 블록이 실행
 * - 파라미터를 사용하여 동적 엔드포인트를 생성할 수 있으며, 간단한 미들웨어를 적용하여 요청을 가로채로 처리할 수 있음
 * 
 * 
 * 
 * 
 * Next.js API Routes 장단점
 * - 간편한 백엔드 구축: 서버를 별도로 설정하거나 관리하지 않고도 서버리스 백엔드 엔드포인트를 쉽게 만들 수 있음
 * - 통합된 개발: 프론트엔드 및 백엔드를 동시에 개발하고 관리할 수 있어 개발 생산성이 향상
 * - 동적 라우팅: 동적 엔드포인트를 생성하고 파라미터를 활용하여 유연한 라우팅을 구현
 * - HTTP 메서드 처리: 다양한 HTTP 요청 메서드(GET, POST, PUT, DELETE 등)에 따른 로직 작성
 * - 다양한 응답 도우미 함수: res.json(), res.send(), res.status() 등과 같은 여러 함수 제공
 * - 복잡한 로직 제한: 복잡한 백엔드 로직이나 데이터 처리를 위해서는 외부 서버나 클라우드 함수가 필요
 * - 고급 기능 제한: 복잡한 인증, 보안, 데이터베이스 연결과 같은 고급 기능을 구현하기에는 한계
 */

/**
 * API Routes + prisma로 데이터 연동기기
 * - prisma를 사용해서 모든 store 데이터를 가져온 후, getServerSideProps에서 해당 API 호출
 */